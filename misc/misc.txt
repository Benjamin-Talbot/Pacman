make ghosts move before or after the tracking pacman and stuff

map characters:
- < is pacman
- & are ghosts
- x is empty space (' ')
- ' ' are . (pellets)
- O are power pellets


ORDER OF OPERATIONS:
(not necessarily in correct order)
1. Move
2. Check if ate pellet
3. etc.



Different colored ghosts have different view distances, able to pathfind farther
make one (hardest) have unlimited view distance ???



Checking that haven't tried moving



Next Direction:
when changeing direction, if can't move, save attempted direciton as next direction
next update, if haven't tried moving, set direction to next direction
otherwise, proceed normally



GAME LOOP:
update every updateRate milliseconds

first record system time
ask for user input
after getchar(), check if time is less than updateRate
if not, enter while loop that constantly checks until it is
update and draw













----------------------- FROM main.c -----------------------
/*

// #include <stdlib.h>
// #include <unistd.h>
// #include <time.h>

    // raw();

        // ungetch(c);
        // sleep(0);

ASCII
- = 45
| = 124
+ = 43
# = 35
. = 46

-/|\-/|\-/|\, *, #, &, +, ., ^, <, >, v

Portals:
    (), {}, [], -/|\, #, +, 0, O, o, :, =, ?, _, ~


40x15
+--------------------------------------+
|                                      |
|  +--+ |                              |
|  |    |                              |
|  +----+                              |
|      <                               |
|  ---+ |                              |
|     | |                              |
|                                      |
|                                      |
|                                      |
|                                      |
|                                      |
|                                      |
+--------------------------------------+

########################################
#      <                               #
#  #### #                              #
#  #    #                              #
#  ######                              #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
########################################


*/

    // const int rows = 15, cols = 40;
    // char elems[rows][cols] = {
    //     { 35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35}
    // };




--------------------- FROM map.c ---------------------

// int main() {
//     int rows = 5, cols = 5;
//     char* map = malloc(sizeof(char) * rows * cols);
//     map = loadMap(map, rows, cols, 1);
    
//     for(int r = 0; r < rows; r++) {
//         for(int c = 0; c < cols; c++) {
//             printf("%c", map[cols*r+c]);
//         }
//         // printf("\n");
//     }
//     printf("\n");
// }



--------------------- FROM pacmanFunctions.c ---------------------

        /**
        if(this->x == ghost->x) {
            if(this->y == ghost->y)
                hitGhost = TRUE;
            else if(this->y - ghost->y == 1 || this->y - ghost->y == -1) {
                if(this->direction[1] + ghost->direction[1] == 0)
                    hitGhost = TRUE;
            }
        }
        
        else if(this->y == ghost->y) {
            if(this->x - ghost->x == 1 || this->x - ghost->x == -1) {
                if(this->direction[0] + ghost->direction[0] == 0)
                    hitGhost = TRUE;
            }
        }
        //*/


--------------------- FROM map00.txt --------------------------

#####################
#         #         #
# ## #### # #### ## #
# ## #XX# # #XX# ## #
# ## #### # #### ## #
#                   #
# ## # ####### # ## #
#    #    #    #    #
#### #### # #### ####
   # #         # #   
#### # ##---## # ####
       #XXXXX#       
####   #######   ####
   #             #   
####   #######   ####
#         #         #
# ### ### # ### ### #
#   #           #   #
### # # ##### # # ###
#     #   #   #     #
# ####### # ####### #
#                   #
#####################



--------------------- FROM map256.txt --------------------------

########################################
#                                      #
# ##### ##### #####  ##### ##### ##### #
#     # #                              #
#     #                                #
#     # #                              #
#     # ###                            #
#                                      #
#     #####                            #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
########################################



--------------------- FROM map1.txt --------------------------

########################################
# x                                    #
# ## ######## ########### ##### # ###  #
#    ##                         # #x#  #
#### ##  #### ##### ##### ##-## # ###  #
#    ##    ## #xxx# #xxx# #xxx# # #    #
#### ######## ##### ##### ##### # ###  #
#                                      #
# ### ######## # ########   #   #### # #
#              #          #   #        #
########################################
#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx#
#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx#
#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx#
########################################


########################################
#                                      #
# ## #### ####### ###### # ###         #
#    #                   # # #         #
#    # ## ### ### ##--## # ###         #
#    #  # # # # # #    # # #           #
#    #### ### ### ###### # ###         #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
########################################