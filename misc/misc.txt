-------- from pacmanAI.c --------

char pacmanChooseDirection(pPacman this, pMap map, char elems[map->height][map->width], Powerup* powerups, int numPowerups, pGhost ghosts, int numGhosts, char *c) {
    float pelletxcomp = 0;
    float pelletycomp = 0;
    float ghostxcomp = 0;
    float ghostycomp = 0;

    int numPellets = 0;
    for(int y = 0; y < map->height; y++) {
        for(int x = 0; x < map->width; x++) {
            if(elems[y][x] == PELLET) {
                pelletxcomp += x - this->x;
                pelletycomp += y - this->y;
                numPellets++;
            }
        }
    }

    for(int i = 0; i < numPowerups; i++) {
        pelletxcomp += powerups[i].x - this->x;
        pelletxcomp += powerups[i].y - this->x;
    }

    // if((numPellets + numPowerups) != 0)

    pelletxcomp /= numPellets + numPowerups;
    pelletycomp /= numPellets + numPowerups;

    pGhost ghost;
    for(int i = 0; i < numGhosts; i++) {
        ghost = &ghosts[i];
        ghostxcomp += this->x - ghost->x;
        ghostycomp += this->y - ghost->y;
    }

    ghostxcomp /= numGhosts;
    ghostycomp /= numGhosts;
    
    // find percentage of the width/height that a vector component is
    // for ghosts, smaller the component, more important it is (to get away), so take 1 - %
    float pelletximpact = pelletxcomp / map->width;
    float pelletyimpact = pelletycomp / map->height;
    float ghostximpact = 1 - ghostxcomp / map->width;
    float ghostyimpact = 1 - ghostycomp / map->height;

    return c;
}





make ghosts move before or after the tracking pacman and stuff

map characters:
- < is pacman
- & are ghosts
- x is empty space (' ')
- ' ' are . (pellets)
- O are power pellets


ORDER OF OPERATIONS:
(not necessarily in correct order)
1. Move
2. Check if ate pellet
3. etc.



Different colored ghosts have different view distances, able to pathfind farther
make one (hardest) have unlimited view distance ???



Checking that haven't tried moving



Next Direction:
when changeing direction, if can't move, save attempted direciton as next direction
next update, if haven't tried moving, set direction to next direction
otherwise, proceed normally



GAME LOOP:
update every updateRate milliseconds

first record system time
ask for user input
after getchar(), check if time is less than updateRate
if not, enter while loop that constantly checks until it is
update and draw













----------------------- FROM main.c -----------------------
/*

// #include <stdlib.h>
// #include <unistd.h>
// #include <time.h>

    // raw();

        // ungetch(c);
        // sleep(0);

ASCII
- = 45
| = 124
+ = 43
# = 35
. = 46

-/|\-/|\-/|\, *, #, &, +, ., ^, <, >, v

Portals:
    (), {}, [], -/|\, #, +, 0, O, o, :, =, ?, _, ~


40x15
+--------------------------------------+
|                                      |
|  +--+ |                              |
|  |    |                              |
|  +----+                              |
|      <                               |
|  ---+ |                              |
|     | |                              |
|                                      |
|                                      |
|                                      |
|                                      |
|                                      |
|                                      |
+--------------------------------------+

########################################
#      <                               #
#  #### #                              #
#  #    #                              #
#  ######                              #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
########################################


*/

    // const int rows = 15, cols = 40;
    // char elems[rows][cols] = {
    //     { 35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  35},
    //     { 35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35}
    // };




--------------------- FROM map.c ---------------------

// int main() {
//     int rows = 5, cols = 5;
//     char* map = malloc(sizeof(char) * rows * cols);
//     map = loadMap(map, rows, cols, 1);
    
//     for(int r = 0; r < rows; r++) {
//         for(int c = 0; c < cols; c++) {
//             printf("%c", map[cols*r+c]);
//         }
//         // printf("\n");
//     }
//     printf("\n");
// }



--------------------- FROM pacmanFunctions.c ---------------------

        /**
        if(this->x == ghost->x) {
            if(this->y == ghost->y)
                hitGhost = TRUE;
            else if(this->y - ghost->y == 1 || this->y - ghost->y == -1) {
                if(this->direction[1] + ghost->direction[1] == 0)
                    hitGhost = TRUE;
            }
        }
        
        else if(this->y == ghost->y) {
            if(this->x - ghost->x == 1 || this->x - ghost->x == -1) {
                if(this->direction[0] + ghost->direction[0] == 0)
                    hitGhost = TRUE;
            }
        }
        //*/


--------------------- FROM map00.txt --------------------------

#####################
#         #         #
# ## #### # #### ## #
# ## #XX# # #XX# ## #
# ## #### # #### ## #
#                   #
# ## # ####### # ## #
#    #    #    #    #
#### #### # #### ####
   # #         # #   
#### # ##---## # ####
       #XXXXX#       
####   #######   ####
   #             #   
####   #######   ####
#         #         #
# ### ### # ### ### #
#   #           #   #
### # # ##### # # ###
#     #   #   #     #
# ####### # ####### #
#                   #
#####################



--------------------- FROM map256.txt --------------------------

########################################
#                                      #
# ##### ##### #####  ##### ##### ##### #
#     # #                              #
#     #                                #
#     # #                              #
#     # ###                            #
#                                      #
#     #####                            #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
########################################



--------------------- FROM map1.txt --------------------------

########################################
# x                                    #
# ## ######## ########### ##### # ###  #
#    ##                         # #x#  #
#### ##  #### ##### ##### ##-## # ###  #
#    ##    ## #xxx# #xxx# #xxx# # #    #
#### ######## ##### ##### ##### # ###  #
#                                      #
# ### ######## # ########   #   #### # #
#              #          #   #        #
########################################
#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx#
#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx#
#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx#
########################################


########################################
#                                      #
# ## #### ####### ###### # ###         #
#    #                   # # #         #
#    # ## ### ### ##--## # ###         #
#    #  # # # # # #    # # #           #
#    #### ### ### ###### # ###         #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
########################################




------------ From pseudocode.txt ------------

GHOST/PACMAN COLLISION
IF pacman.x == ghost.x:
    IF pacman.y == ghost.y:
        gameover()
    ELSE IF pacmman.y - ghost.y == 1 OR pacman.y - ghost.y == -1:
        IF pacman.direction[1] + ghost.direction[1] == 0:
            gameover()
ELSE IF pacman.y == ghost.y:
    IF pacman.x - ghost.x == 1 OR pacman.x - ghost.x == -1:
        IF pacman.direction[0] + ghost.direction[0] == 0:
            gameover()